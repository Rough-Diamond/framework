/*
 * Copyright (c) 2008, 2009
 *  Rough Diamond Co., Ltd.              -- http://www.rough-diamond.co.jp/
 *  Information Systems Institute, Ltd.  -- http://www.isken.co.jp/
 *  All rights reserved.
 */
package jp.rough_diamond.commons.entity;

import java.util.List;

import jp.rough_diamond.commons.extractor.Extractor;
import jp.rough_diamond.commons.extractor.InnerJoin;
import jp.rough_diamond.commons.extractor.Property;
import jp.rough_diamond.commons.resource.Messages;
import jp.rough_diamond.commons.service.BasicService;
import jp.rough_diamond.commons.testdata.NumberingLoader;
import jp.rough_diamond.commons.testdata.UnitLoader;
import jp.rough_diamond.commons.testing.DataLoadingTestCase;
import jp.rough_diamond.commons.testing.Loader;

public class UnitTest extends DataLoadingTestCase {

	protected void setUp() throws Exception {
		super.setUp();
		Loader.load(UnitLoader.class);
		Loader.load(NumberingLoader.class);
	}

	public void testGateRate() throws Exception {
		Unit u = BasicService.getService().findByPK(Unit.class, 1L);
		Number n = u.getRate();
		assertEquals("値が誤っています。", 2, n.intValue() + 1);
	}
	
	public void testInsertNormalCase() throws Exception {
		Unit u = new Unit();
		u.setName("ほげほげ");
		u.setBase(u);
		u.setRate(new ScalableNumber(1L, 0));
		u.setScale(1);
		BasicService.getService().insert(u);
	}
	
	public void testRiviseBaseRate() throws Exception {
		BasicService service = BasicService.getService();
		Unit u = service.findByPK(Unit.class, 1L);
		u.setName("xxx");
		u.setRate(new ScalableNumber(10L, 0));
		service.update(u);
		u = service.findByPK(Unit.class, 1L);
		assertEquals("更新されていません。", "xxx", u.getName());
		assertEquals("レートが補正されていません。", 1, u.getRate().intValue());
	}
	
	public void testIsBaseUnit() throws Exception {
		Unit u = new Unit();
		assertFalse(u.isBaseUnit());
		u.setBase(u);
		assertTrue(u.isBaseUnit());
		Unit u2 = new Unit();
		u.setBase(u2);
		assertFalse(u.isBaseUnit());
		u.setId(1L);
		u2.setId(2L);
		assertFalse(u.isBaseUnit());
		u2.setId(1L);
		assertTrue(u.isBaseUnit());
	}
	
	public void testAutoGeneratedSave() throws Exception {
		//読み込んでsaveの場合はupdate
		Unit u = BasicService.getService().findByPK(Unit.class, 1L);
		Extractor ex = new Extractor(Unit.class);
		long before = BasicService.getService().getCountByExtractor(ex);
		u.setName("xxxx");
		u.save();
		long after = BasicService.getService().getCountByExtractor(ex);
		assertEquals("挿入されています。", before, after);
		//読み込んでIDを置き替えたらinsert
		u = BasicService.getService().findByPK(Unit.class, 1L);
		assertEquals("更新されていません。", "xxxx", u.getName());
		u.setId(null);
		before = BasicService.getService().getCountByExtractor(ex);
		u.save();
		after = BasicService.getService().getCountByExtractor(ex);
		assertEquals("挿入されていません。", before + 1L, after);
		//新規に作成した瞬間はinsert
		u = new Unit();
		u.setName("ほげほげ");
		u.setBase(u);
		u.setRate(new ScalableNumber(1L, 0));
		u.setScale(1);
		before = BasicService.getService().getCountByExtractor(ex);
		u.save();
		after = BasicService.getService().getCountByExtractor(ex);
		assertEquals("挿入されていません。", before + 1L, after);
		//新規に作成してインサートしてもう１回saveした場合は更新
		u.setName("ぽげ");
		before = BasicService.getService().getCountByExtractor(ex);
		u.save();
		after = BasicService.getService().getCountByExtractor(ex);
		assertEquals("挿入されています。", before, after);
	}
	
	public void testMaxCharLengthValidator() throws Exception {
		Unit u = new Unit();
		u.setName("12345678901234567");
		u.setBase(u);
		u.setScale(0);
		u.setRate(new ScalableNumber("1"));
		Messages msgs = u.validateObject();
		assertTrue("エラーがありません。", msgs.hasError());
		System.out.println(msgs);
		assertEquals("エラープロパティ数が誤っています。", 1, msgs.getProperties().size());
		assertEquals("エラーメッセージ数が誤っています。", 1, msgs.get("Unit.name").size());
		assertEquals("キーが誤っています。", "errors.maxcharlength", msgs.get("Unit.name").get(0).getKey());

		u.setName("あいうえおかきくけこさしすせそ");
		msgs = u.validateObject();
		assertTrue("エラーがありません。", msgs.hasError());
		System.out.println(msgs);
		assertEquals("エラープロパティ数が誤っています。", 1, msgs.getProperties().size());
		assertEquals("エラーメッセージ数が誤っています。", 1, msgs.get("Unit.name").size());
		assertEquals("キーが誤っています。", "errors.maxlength", msgs.get("Unit.name").get(0).getKey());
	}
	
	public void test多分Distinctの仕様変更すると動かなくなるテスト() throws Exception {
		Extractor ex = new Extractor(Unit.class, "base");
		ex.addInnerJoin(new InnerJoin(
				new Property(Unit.class, "base", null),
				new Property(Unit.class, "child", Unit.BASE)));
		ex.setDistinct(true);
		List<Unit> list = BasicService.getService().findByExtractor(ex);
		assertEquals("返却値が誤っています。", 2, list.size());
	}
}
